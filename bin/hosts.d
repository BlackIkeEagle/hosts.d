#!/usr/bin/env sh
# vim: ft=sh:

HOSTS="/etc/hosts"
HOSTSD="/etc/hosts.d"

usage() {
    echo "usage"
}

check_configfile() {
    local configfile="$1"
    local tmphostsd=''

    if [ "$configfile" = "" ]; then
        echo ""
        return 0
    fi

    configfile=$(realpath $configfile)

    if [ ! -e "$configfile" ]; then
        echo "config $configfile does not exist"
        return 1
    else
        if ! grep -e 'HOSTS=' $configfile > /dev/null 2>&1; then
            echo "HOSTS not set in config file"
            return 1
        fi
        if ! grep -e 'HOSTSD=' $configfile > /dev/null 2>&1; then
            echo "HOSTSD not set in config file"
            return 1
        fi
    fi
    echo "$configfile"
    return 0
}

load_configfile() {
    local configfile="$1"

    if [ "$configfile" = "" ]; then
        return 0
    fi

    local tmphosts=$(
        grep -e 'HOSTS=' $configfile \
            | cut -d '=' -f 2- \
            | sed -e "s/'\|\"//g"
    )
    local tmphostsfolder=$(dirname "$tmphosts")
    mkdir -p "$tmphostsfolder"
    tmphostsfolder=$(realpath $tmphostsfolder)
    tmphosts="$tmphostsfolder/$(basename "$tmphosts")"
    HOSTS="$tmphosts"
    local tmphostsd=$(
        grep -e 'HOSTSD=' $configfile \
            | cut -d '=' -f 2- \
            | sed -e "s/'\|\"//g"
    )
    tmphostsd=$(realpath $tmphostsd)
    if [ -d "$tmphostsd" ]; then
        HOSTSD="$tmphostsd"
    fi
}

check_outformat() {
    local outformat=$1

    if [ "$outformat" = "hosts" ]; then
        echo $outformat
    elif [ "$outformat" = "dnsmasq" ]; then
        echo $outformat
    else
        echo 'hosts'
    fi
    return 0
}

hostsd_write() {
    local outformat=$1
    echo "# AUTOMATICALLY GENERATED by hosts.d do not manually modify" \
        > "$HOSTS.new"
    for file in "$HOSTSD"/*.conf; do
        if [ "$outformat" = "dnsmasq" ]; then
            hostsd_format_out_dnsmasq "$file" >> "$HOSTS.new"
        else
            hostsd_format_out_hosts "$file" >> "$HOSTS.new"
        fi
    done
    mv "$HOSTS.new" "$HOSTS"
}

hostsd_format_out_hosts() {
    local file=$1

    IFS=$'\n'
    for line in $(cat "$file"); do
        echo "$line" | awk '{for (i=2; i<=NF; i++) print $1 " " $i}'
    done
}

hostsd_format_out_dnsmasq() {
    local file=$1

    IFS=$'\n'
    for line in $(cat "$file"); do
        echo "$line" | awk '{for (i=2; i<=NF; i++) print "address=/" $i "/" $1}'
    done
}

hostsd_daemon() {
    local outformat=$1

    hostsd_write $outformat

    while true #run indefinitely
    do
        inotifywait -r \
            -e modify,attrib,close_write,move,create,delete "$HOSTSD" \
            && hostsd_write $outformat
    done
}

run() {
    local configfile=''
    local outformat=''
    local daemon='off'

    # getopts
    while true; do
        case "$1" in
            -h | --help )
                usage
                exit 1
                ;;
            -c | --config )
                if [ ! -z $2 ]; then
                    configfile=$2
                    shift
                fi
                shift
                ;;
            -f | --format )
                if [ ! -z $2 ]; then
                    outformat=$2
                    shift
                fi
                shift
                ;;
            -d | --daemon )
                daemon='on'
                shift
                ;;
            * ) shift ;;
        esac
        if [[ 0 -eq $# ]]; then
            break;
        fi
    done

    configfile=$(check_configfile $configfile)
    if [ "$?" -ne 0 ]; then
        echo "$configfile"
        exit 1
    fi
    load_configfile $configfile

    outformat=$(check_outformat $outformat)

    if [ "on" = "$daemon" ]; then
        hostsd_daemon $outformat
    else
        hostsd_write $outformat
    fi
}

run $@
